Создать две ХП:

ХП1 выводит: фото, фамилию, имя, почту, дата рождения пациента, дату приема, количество оказанных услуг, общую стоимость по оказанным услугам (в один день может быть оказано несколько услуг).
ХП 2 выводит: по дате приема, для указанного клиента - название  услугу, стоимость услуги, рецепт, диагноз

CREATE PROCEDURE GetPatientAppointmentDetails
    @PatientID INT
AS
BEGIN
    SELECT 
        p.Photo,
        p.LastName AS 'Фамилия',
        p.FirstName AS 'Имя',
        p.Email AS 'Почта',
        p.BirthDate AS 'Дата рождения',
        a.AppointmentDate AS 'Дата приема',
        COUNT(s.ServiceID) AS 'Количество услуг',
        SUM(s.Price) AS 'Общая стоимость'
    FROM 
        Patients p
    JOIN 
        Appointments a ON p.PatientID = a.PatientID
    LEFT JOIN 
        AppointmentServices asp ON a.AppointmentID = asp.AppointmentID
    LEFT JOIN 
        Services s ON asp.ServiceID = s.ServiceID
    WHERE 
        p.PatientID = @PatientID
    GROUP BY 
        p.Photo,
        p.LastName,
        p.FirstName,
        p.Email,
        p.BirthDate,
        a.AppointmentDate,
        a.AppointmentID
    ORDER BY 
        a.AppointmentDate DESC;
END;

Пациент (Фамилия, Имя, почта, пароль, дата рождения, фото) Услуга (название, стоимость) Прием (дата приема, услуга, клиент, рецепт, диагноз) 
создать бд


-- Создание базы данных
CREATE DATABASE MedicalClinic;
GO

USE MedicalClinic;
GO

-- Создание таблицы Пациентов
CREATE TABLE Patients (
    PatientID INT IDENTITY(1,1) PRIMARY KEY,
    LastName NVARCHAR(50) NOT NULL,
    FirstName NVARCHAR(50) NOT NULL,
    Email NVARCHAR(100) UNIQUE NOT NULL,
    Password NVARCHAR(100) NOT NULL,
    BirthDate DATE NOT NULL,
    Photo VARBINARY(MAX) NULL
);

-- Создание таблицы Услуг
CREATE TABLE Services (
    ServiceID INT IDENTITY(1,1) PRIMARY KEY,
    ServiceName NVARCHAR(100) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL
);

-- Создание таблицы Приемов
CREATE TABLE Appointments (
    AppointmentID INT IDENTITY(1,1) PRIMARY KEY,
    AppointmentDate DATETIME NOT NULL,
    PatientID INT NOT NULL,
    Diagnosis NVARCHAR(MAX) NULL,
    Prescription NVARCHAR(MAX) NULL,
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)
);

-- Создание связующей таблицы для услуг в приемах
CREATE TABLE AppointmentServices (
    AppointmentServiceID INT IDENTITY(1,1) PRIMARY KEY,
    AppointmentID INT NOT NULL,
    ServiceID INT NOT NULL,
    FOREIGN KEY (AppointmentID) REFERENCES Appointments(AppointmentID),
    FOREIGN KEY (ServiceID) REFERENCES Services(ServiceID),
    UNIQUE (AppointmentID, ServiceID)
);

